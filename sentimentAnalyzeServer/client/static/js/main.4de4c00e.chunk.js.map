{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","Object","keys","this","props","emotions","map","e","i","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","textinput","console","log","axios","get","then","response","JSON","stringify","data","output","style","color","fontSize","catch","err","toString","sendForEmotionAnalysis","title","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4de4c00e.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n    render() {\n      return (  \n        <div>\n          <table className=\"table table-bordered\">\n            <tbody>\n            {Object.keys(this.props.emotions).map(function(e,i) {\n                    return <tr>\n                      <td>{e}</td>\n                      <td>{i}</td>\n                    </tr>;\n            })}\n            </tbody>\n          </table>\n          </div>\n          );\n        }\n    \n}\nexport default EmotionTable;\n","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n            mode: \"text\",\n          sentimentOutput:[],\n          sentiment:true\n        }\n  \n  componentDidMount() {\n    document.title = 'Sentiment Analyzer';\n  }\n\n  renderTextArea = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"url\") {\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"text\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    } \n  }\n\n  renderTextBox = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"text\") {\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"url\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    }\n  }\n\n  sendForSentimentAnalysis = () => {\n    this.setState({sentiment:true});\n    let ret = \"\";\n    let url = \".\";\n\n    let textinput = document.getElementById(\"textinput\").value;\n    console.log(\"Sending sentiment: \" + textinput);\n\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/sentiment?url=\"+textinput;\n    } else {\n      url = url+\"/text/sentiment?text=\"+textinput;\n    }\n    ret = axios.get(url);\n    ret.then((response)=>{\n\n      //Include code here to check the sentiment and fomrat the data accordingly\n      console.log(\"Received sentiment: \" + JSON.stringify(response.data));\n\n      this.setState({sentimentOutput:response.data});\n      let output = response.data;\n      if(response.data === \"positive\") {\n        output = <div style={{color:\"green\",fontSize:20}}>{response.data}</div>\n      } else if (response.data === \"negative\"){\n        output = <div style={{color:\"red\",fontSize:20}}>{response.data}</div>\n      } else {\n        output = <div style={{color:\"orange\",fontSize:20}}>{response.data}</div>\n      }\n      this.setState({sentimentOutput:output});\n    }).catch(err => {\n      console.log(err.toString())\n    });\n  }\n\n  sendForEmotionAnalysis = () => {\n    this.setState({sentiment:false});\n    let ret = \"\";\n    let url = \".\";\n\n    let textinput = document.getElementById(\"textinput\").value;\n    console.log(\"Sending emotion: \" + textinput);\n\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/emotion?url=\"+textinput;\n    } else {\n      url = url+\"/text/emotion/?text=\"+textinput;\n    }\n    ret = axios.get(url);\n\n    ret.then((response)=>{\n      console.log(\"Received emotion: \" + JSON.stringify(response.data));\n      this.setState({sentimentOutput:<EmotionTable emotions={response.data}/>});\n    }).catch(err => {\n        console.log(err.toString())\n    });\n  }\n  \n\n  render() {\n    return (  \n      <div className=\"App\">\n      <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n        <button className=\"btn btn-dark\"  onClick={this.renderTextBox}>URL</button>\n        <br/><br/>\n        {this.state.innercomp}\n        <br/>\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n        <br/>\n            {this.state.sentimentOutput}\n      </div>\n    );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}